<?xml version="1.0" encoding="UTF-8"?>
<pipeline>
  <info>
    <name>RangerMSP-update-company-nodes</name>
    <name_sync_with_filename>Y</name_sync_with_filename>
    <description/>
    <extended_description/>
    <pipeline_version/>
    <pipeline_type>Normal</pipeline_type>
    <pipeline_status>0</pipeline_status>
    <parameters>
    </parameters>
    <capture_transform_performance>N</capture_transform_performance>
    <transform_performance_capturing_delay>1000</transform_performance_capturing_delay>
    <transform_performance_capturing_size_limit>100</transform_performance_capturing_size_limit>
    <created_user>-</created_user>
    <created_date>2020/01/03 22:40:31.737</created_date>
    <modified_user>admin</modified_user>
    <modified_date>2020/01/05 12:32:41.443</modified_date>
    <key_for_session_key>H4sIAAAAAAAAAAMAAAAAAAAAAAA=</key_for_session_key>
    <is_key_private>N</is_key_private>
  </info>
  <notepads>
  </notepads>
  <order>
    <hop>
      <from>Query CommitCRM Company (cards) table</from>
      <to>Create (:Company) labels for new companies</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Get variables</from>
      <to>Update Logging (RangerMSP update tf start)</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Query CommitCRM modified Company (cards) table</from>
      <to>Edit (:Company) nodes for modified companies</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Get last :Company</from>
      <to>Query CommitCRM Company (cards) table</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Get last :Company</from>
      <to>Query CommitCRM modified Company (cards) table</to>
      <enabled>Y</enabled>
    </hop>
  </order>
  <transform>
    <name>Create (:Company) labels for new companies</name>
    <type>Neo4jCypherOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${graphdb-ds}</connection>
    <cypher>UNWIND $companies as row
MATCH (r:Recordstatus{state:row.accountstatus})
OPTIONAL MATCH (dc1:Crmcontract {recid:row.bcrecid})
OPTIONAL MATCH (dc:Crmcontract {acctrecid:coalesce(row.bcrecid,'None Provided')})
OPTIONAL MATCH (m:Crmemployee {recid:row.assigncardid})
OPTIONAL MATCH (x:Bluenetexpress {name:'Blue Net Express'})
MERGE (a:Company {acctrecid:row.recid})
ON CREATE
set a.city=row.city,a.name=row.company,a.createdon=datetime(row.createdate).epochmillis,a.updatedon=datetime(row.updatedate).epochmillis,a.defaultcontract=row.bcrecid
MERGE (a)-[:ACCOUNT_STATE]->(r)
FOREACH (ignoreMe in CASE WHEN (toLower(row.cardid3) contains 'express') and x.name IS NOT NULL THEN [1] ELSE [] END |  MERGE (a)-[:SERVICED_BY]->(x))
FOREACH (ignoreMe in CASE WHEN m.name IS NOT NULL THEN [1] ELSE [] END | MERGE (a)-[:ACCOUNT_MANAGER]->(m))
FOREACH (ignoreMe in CASE WHEN dc.recid IS NOT NULL THEN [1] ELSE [] END | MERGE (a)-[:USES_DEFAULT_CONTRACT]->(dc))
RETURN a.name as company,a.acctrecid as recid</cypher>
    <batch_size/>
    <read_only>N</read_only>
    <nr_retries_on_error/>
    <retry>Y</retry>
    <cypher_from_field>N</cypher_from_field>
    <cypher_field/>
    <unwind>Y</unwind>
    <unwind_map>companies</unwind_map>
    <returning_graph>N</returning_graph>
    <return_graph_field/>
    <mappings>
      <mapping>
        <parameter>recid</parameter>
        <field>recid</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>accountstatus</parameter>
        <field>accountstatus</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>bcrecid</parameter>
        <field>bcrecid</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>city</parameter>
        <field>city</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>kind</parameter>
        <field>kind</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>cardid3</parameter>
        <field>cardid3</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>company</parameter>
        <field>company</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>createdate</parameter>
        <field>createdate</field>
        <type>LocalDateTime</type>
      </mapping>
      <mapping>
        <parameter>updatedate</parameter>
        <field>updatedate</field>
        <type>LocalDateTime</type>
      </mapping>
      <mapping>
        <parameter>assigncardid</parameter>
        <field>assigncardid</field>
        <type>String</type>
      </mapping>
    </mappings>
    <returns>
      <return>
        <name>company</name>
        <type>String</type>
        <source_type/>
      </return>
      <return>
        <name>recid</name>
        <type>String</type>
        <source_type/>
      </return>
    </returns>
    <attributes/>
    <GUI>
      <xloc>736</xloc>
      <yloc>176</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Edit (:Company) nodes for modified companies</name>
    <type>Neo4jCypherOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${graphdb-ds}</connection>
    <cypher>UNWIND $companies as row
MATCH (a:Company {acctrecid:row.recid})
OPTIONAL MATCH (dc1:Crmcontract {recid:row.bcrecid})
OPTIONAL MATCH (x:Bluenetexpress {name:'Blue Net Express'})
OPTIONAL MATCH (m:Crmemployee {acctrecid:row.assigncardid})
OPTIONAL MATCH (dc:Crmcontract {recid:coalesce(row.bcrecid,'None Provided')})
OPTIONAL MATCH (r:Recordstatus {state:row.accountstatus})
OPTIONAL MATCH (a)-[asr:ACCOUNT_STATE]-(ors:Recordstatus)
OPTIONAL MATCH (a)-[dcr:USES_DEFAULT_CONTRACT]-(odc:Crmcontract)
OPTIONAL MATCH (a)-[sbr:SERVICED_BY]->(x)
OPTIONAL MATCH (a)-[amr:ACCOUNT_MANAGER]->(oam)
FOREACH (ignoreMe in CASE WHEN (row.accountstatus &lt;&gt; ors.state) THEN [1] ELSE [] END | DELETE asr)
FOREACH (ignoreMe in CASE WHEN (row.bcrecid &lt;&gt; odc.recid) THEN [1] ELSE [] END | DELETE dcr)
FOREACH (ignoreMe in CASE WHEN (row.assigncardid &lt;&gt; oam.acctrecid) THEN [1] ELSE [] END | DELETE amr)
FOREACH (ignoreMe in CASE WHEN not (toLower(row.cardid3) contains 'express') THEN [1] ELSE [] END | DELETE sbr)
FOREACH (ignoreMe in CASE WHEN coalesce(row.city,'isnull') &lt;&gt; coalesce(a.city,'isnull') THEN [1] ELSE [] END | SET a.city=row.city)
FOREACH (ignoreMe in CASE WHEN coalesce(row.company,'isnull') &lt;&gt; coalesce(a.name,'isnull') THEN [1] ELSE [] END | SET a.name=row.company)
FOREACH (ignoreMe in CASE WHEN coalesce(row.createdate,'isnull') &lt;&gt; coalesce(a.createdon,'isnull') THEN [1] ELSE [] END | SET a.createdon=datetime(row.createdate).epochmillis)
FOREACH (ignoreMe in CASE WHEN coalesce(row.updatedate,'isnull') &lt;&gt; coalesce(a.updatedon,'isnull') THEN [1] ELSE [] END | SET a.updatedon=datetime(row.updatedate).epochmillis)
FOREACH (ignoreMe in CASE WHEN coalesce(row.bcrecid,'isnull') &lt;&gt; coalesce(a.defaultcontract,'isnull') THEN [1] ELSE [] END | SET a.defaultcontract=row.bcrecid)
FOREACH (ignoreMe in CASE WHEN dc.recid IS NOT NULL THEN [1] ELSE [] END | MERGE (a)-[:USES_DEFAULT_CONTRACT]->(dc))
FOREACH (ignoreMe in CASE WHEN (toLower(row.cardid3) contains 'express') AND x.name IS NOT NULL THEN [1] ELSE [] END | MERGE (a)-[:SERVICED_BY]->(x))
FOREACH (ignoreMe in CASE WHEN m.name IS NOT NULL THEN [1] ELSE [] END | MERGE (a)-[:ACCOUNT_MANAGER]->(m))
MERGE (a)-[:ACCOUNT_STATE]->(r)
RETURN a.name
;
</cypher>
    <batch_size/>
    <read_only>N</read_only>
    <nr_retries_on_error/>
    <retry>Y</retry>
    <cypher_from_field>N</cypher_from_field>
    <cypher_field/>
    <unwind>Y</unwind>
    <unwind_map>companies</unwind_map>
    <returning_graph>N</returning_graph>
    <return_graph_field/>
    <mappings>
      <mapping>
        <parameter>recid</parameter>
        <field>recid</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>accountstatus</parameter>
        <field>accountstatus</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>bcrecid</parameter>
        <field>bcrecid</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>city</parameter>
        <field>city</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>kind</parameter>
        <field>kind</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>cardid3</parameter>
        <field>cardid3</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>company</parameter>
        <field>company</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>createdate</parameter>
        <field>createdate</field>
        <type>LocalDateTime</type>
      </mapping>
      <mapping>
        <parameter>updatedate</parameter>
        <field>updatedate</field>
        <type>LocalDateTime</type>
      </mapping>
      <mapping>
        <parameter>assigncardid</parameter>
        <field>assigncardid</field>
        <type>String</type>
      </mapping>
    </mappings>
    <returns>
      <return>
        <name>a.name</name>
        <type>String</type>
        <source_type>String</source_type>
      </return>
    </returns>
    <attributes/>
    <GUI>
      <xloc>752</xloc>
      <yloc>272</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Get last :Company</name>
    <type>Neo4jCypherOutput</type>
    <description/>
    <distribute>N</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${graphdb-ds}</connection>
    <cypher>MATCH (cdl:Crmdataload {name:'CommitCRM'})
OPTIONAL MATCH (la:Company)
WITH max(coalesce(la.createdon,0)) as lastnewcompany, max(coalesce(la.updatedon,0)) as lastmodifiedcompany,cdl
WITH COLLECT(lastnewcompany)+COLLECT(lastmodifiedcompany)+cdl.crminit as tstamps
UNWIND tstamps as ts
WITH min(ts) as lastmodifiedcompany
WITH apoc.date.format(coalesce(lastmodifiedcompany,0),'ms','yyyy-MM-dd HH:mm:ss.sss','CST') AS lastmodifiedcompany
//RETURN '1990-08-14 14:34:40.040' as lastmodifiedcompany
RETURN lastmodifiedcompany
;</cypher>
    <batch_size/>
    <read_only>Y</read_only>
    <nr_retries_on_error/>
    <retry>Y</retry>
    <cypher_from_field>N</cypher_from_field>
    <cypher_field/>
    <unwind>N</unwind>
    <unwind_map/>
    <returning_graph>N</returning_graph>
    <return_graph_field/>
    <mappings/>
    <returns>
      <return>
        <name>lastmodifiedcompany</name>
        <type>String</type>
        <source_type>String</source_type>
      </return>
    </returns>
    <attributes/>
    <GUI>
      <xloc>80</xloc>
      <yloc>224</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Get variables</name>
    <type>GetVariable</type>
    <description/>
    <distribute>N</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <fields>
      <field>
        <name>jobname</name>
        <variable> ${Internal.Workflow.Name}</variable>
        <type>String</type>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <length>-1</length>
        <precision>-1</precision>
        <trim_type>none</trim_type>
      </field>
      <field>
        <name>transname</name>
        <variable>${Internal.Pipeline.Name}</variable>
        <type>String</type>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <length>-1</length>
        <precision>-1</precision>
        <trim_type>none</trim_type>
      </field>
      <field>
        <name>tdir</name>
        <variable>${Internal.Pipeline.Filename.Folder}</variable>
        <type>String</type>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <length>-1</length>
        <precision>-1</precision>
        <trim_type>none</trim_type>
      </field>
      <field>
        <name>jdir</name>
        <variable>${Internal.Workflow.Filename.Folder}</variable>
        <type>String</type>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <length>-1</length>
        <precision>-1</precision>
        <trim_type>none</trim_type>
      </field>
      <field>
        <name>jfilename</name>
        <variable>${Internal.Workflow.Filename.Name}</variable>
        <type>String</type>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <length>-1</length>
        <precision>-1</precision>
        <trim_type>none</trim_type>
      </field>
      <field>
        <name>tfilename</name>
        <variable>${Internal.Pipeline.Filename.Name}</variable>
        <type>String</type>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <length>-1</length>
        <precision>-1</precision>
        <trim_type>none</trim_type>
      </field>
    </fields>
    <attributes/>
    <GUI>
      <xloc>144</xloc>
      <yloc>80</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Query CommitCRM Company (cards) table</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${RangerMSP-ds}</connection>
    <execute_each_row>N</execute_each_row>
    <lookup>Get last :Company</lookup>
    <limit>0</limit>
    <sql>SELECT recid,accountstatus,bcrecid,city,kind,cardid3,company,createdate,updatedate,assigncardid from cards WHERE company is NOT NULL AND kind is NOT NULL AND entitykind=1 AND (CREATEDATE > ? )</sql>
    <variables_active>Y</variables_active>
    <attributes/>
    <GUI>
      <xloc>448</xloc>
      <yloc>176</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Query CommitCRM modified Company (cards) table</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${RangerMSP-ds}</connection>
    <execute_each_row>N</execute_each_row>
    <lookup>Get last :Company</lookup>
    <limit>0</limit>
    <sql>SELECT recid,accountstatus,bcrecid,city,kind,cardid3,company,createdate,updatedate,assigncardid from cards WHERE company is NOT NULL AND kind is NOT NULL AND entitykind=1 AND UPDATEDATE > ?</sql>
    <variables_active>Y</variables_active>
    <attributes/>
    <GUI>
      <xloc>448</xloc>
      <yloc>272</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Update Logging (RangerMSP update tf start)</name>
    <type>Neo4jCypherOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${graphdb-ds}</connection>
    <cypher>UNWIND $taskparams as t
WITH t,timestamp() as tfstart,trim(replace(t.jobname,'Parent Job Name',t.transname)) as jobname
MATCH (l:N4jlogging {jobname:jobname})
SET l.lasttfrun=tfstart,l.jobname=jobname,l.transname=t.transname,l.jobstatus='running',l.tdir=t.tdir,l.tfilename=t.tfilename,l.jdir=t.jdir,l.jfilename=t.jfilename
RETURN apoc.date.format(l.lastjobrun,'ms',"yyyy-MM-dd'T'HH:mm:ss",'CST') as jobstart,l.jobname
;</cypher>
    <batch_size/>
    <read_only>N</read_only>
    <nr_retries_on_error/>
    <retry>Y</retry>
    <cypher_from_field>N</cypher_from_field>
    <cypher_field/>
    <unwind>Y</unwind>
    <unwind_map>taskparams</unwind_map>
    <returning_graph>N</returning_graph>
    <return_graph_field/>
    <mappings>
      <mapping>
        <parameter>jobname</parameter>
        <field>jobname</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>transname</parameter>
        <field>transname</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>tdir</parameter>
        <field>tdir</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>jdir</parameter>
        <field>jdir</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>jfilename</parameter>
        <field>jfilename</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>tfilename</parameter>
        <field>tfilename</field>
        <type>String</type>
      </mapping>
    </mappings>
    <returns>
      <return>
        <name>jobstart</name>
        <type>String</type>
        <source_type>String</source_type>
      </return>
      <return>
        <name>l.jobname</name>
        <type>String</type>
        <source_type>String</source_type>
      </return>
      <return>
        <name>l.transname</name>
        <type>String</type>
        <source_type>String</source_type>
      </return>
    </returns>
    <attributes/>
    <GUI>
      <xloc>368</xloc>
      <yloc>80</yloc>
    </GUI>
  </transform>
  <transform_error_handling>
  </transform_error_handling>
  <attributes/>
</pipeline>
