<?xml version="1.0" encoding="UTF-8"?>
<pipeline>
  <info>
    <name>test2</name>
    <name_sync_with_filename>Y</name_sync_with_filename>
    <description/>
    <extended_description/>
    <pipeline_version/>
    <pipeline_type>Normal</pipeline_type>
    <parameters>
    </parameters>
    <capture_transform_performance>N</capture_transform_performance>
    <transform_performance_capturing_delay>1000</transform_performance_capturing_delay>
    <transform_performance_capturing_size_limit>100</transform_performance_capturing_size_limit>
    <created_user>-</created_user>
    <created_date>2022/09/30 10:50:13.881</created_date>
    <modified_user>-</modified_user>
    <modified_date>2022/09/30 10:50:13.881</modified_date>
    <key_for_session_key>H4sIAAAAAAAAAAMAAAAAAAAAAAA=</key_for_session_key>
    <is_key_private>N</is_key_private>
  </info>
  <notepads>
  </notepads>
  <order>
    <hop>
      <from>Block until transforms finish</from>
      <to>Update Manufacturer from assets</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Block until transforms finish 2</from>
      <to>UpdateOppstage from opps</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Block until transforms finish 3</from>
      <to>UpdateOppkind from opps</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Block until transforms finish 4</from>
      <to>Update Oppreason from opps</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Block until transforms finish 5</from>
      <to>Update Oppsource from opps</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Query Ticketcategories from RangerMSP</from>
      <to>Create distinct Ticketcategory</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Update Assetcategory from assets</from>
      <to>Create distinct Assetcategory</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Update Manufacturer from assets</from>
      <to>Create distinct Manufacturer</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Update Oppreason from opps</from>
      <to>Create distinct Oppreason</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Update Oppsource from opps</from>
      <to>Create distinct Oppsource</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>UpdateOppkind from opps</from>
      <to>Create distinct Oppkind</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>UpdateOppstage from opps</from>
      <to>Create distinct Oppstage</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Wait </from>
      <to>Query Ticketcategories from RangerMSP</to>
      <enabled>Y</enabled>
    </hop>
  </order>
  <transform>
    <name>Block until transforms finish</name>
    <type>BlockUntilTransformsFinish</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <transforms>
      <transform>
        <name>Create distinct Assetcategory</name>
      </transform>
    </transforms>
    <attributes/>
    <GUI>
      <xloc>128</xloc>
      <yloc>128</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Block until transforms finish 2</name>
    <type>BlockUntilTransformsFinish</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <transforms>
      <transform>
        <name>Create distinct Manufacturer</name>
      </transform>
    </transforms>
    <attributes/>
    <GUI>
      <xloc>128</xloc>
      <yloc>208</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Block until transforms finish 3</name>
    <type>BlockUntilTransformsFinish</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <transforms>
      <transform>
        <name>Create distinct Oppstage</name>
      </transform>
    </transforms>
    <attributes/>
    <GUI>
      <xloc>128</xloc>
      <yloc>288</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Block until transforms finish 4</name>
    <type>BlockUntilTransformsFinish</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <transforms>
      <transform>
        <name>Create distinct Oppkind</name>
      </transform>
    </transforms>
    <attributes/>
    <GUI>
      <xloc>128</xloc>
      <yloc>368</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Block until transforms finish 5</name>
    <type>BlockUntilTransformsFinish</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <transforms>
      <transform>
        <name>Create distinct Oppreason</name>
      </transform>
    </transforms>
    <attributes/>
    <GUI>
      <xloc>128</xloc>
      <yloc>448</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Create distinct Assetcategory</name>
    <type>Neo4jCypherOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${graphdb-ds}</connection>
    <cypher>UNWIND $categories as c
WITH COLLECT(distinct c.user1) as categories
UNWIND categories as cat
MERGE (ac:Assetcategory {name:cat})
;</cypher>
    <batch_size>25000</batch_size>
    <read_only>N</read_only>
    <nr_retries_on_error/>
    <retry>Y</retry>
    <cypher_from_field>N</cypher_from_field>
    <cypher_field/>
    <unwind>Y</unwind>
    <unwind_map>categories</unwind_map>
    <returning_graph>N</returning_graph>
    <return_graph_field/>
    <mappings>
      <mapping>
        <parameter>user1</parameter>
        <field>user1</field>
        <type>String</type>
      </mapping>
    </mappings>
    <returns>
      <return>
        <name>badasset</name>
        <type>String</type>
        <source_type/>
      </return>
    </returns>
    <attributes/>
    <GUI>
      <xloc>624</xloc>
      <yloc>64</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Create distinct Manufacturer</name>
    <type>Neo4jCypherOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${graphdb-ds}</connection>
    <cypher>UNWIND $manufacturers as m
WITH COLLECT(distinct m.manufacturer) as manufacturers,"[^a-zA-Z\\d]" as regex
UNWIND manufacturers as mfr
OPTIONAL MATCH (m:Manufacturer) where toLower(m.name)=trim(toLower(mfr)) or toLower(m.name) in m.aliases
WITH * where m is null
MERGE (:Manufacturer {name:mfr})
;</cypher>
    <batch_size>25000</batch_size>
    <read_only>N</read_only>
    <nr_retries_on_error/>
    <retry>Y</retry>
    <cypher_from_field>N</cypher_from_field>
    <cypher_field/>
    <unwind>Y</unwind>
    <unwind_map>manufacturers</unwind_map>
    <returning_graph>N</returning_graph>
    <return_graph_field/>
    <mappings>
      <mapping>
        <parameter>manufacturer</parameter>
        <field>manufacturer</field>
        <type>String</type>
      </mapping>
    </mappings>
    <returns/>
    <attributes/>
    <GUI>
      <xloc>624</xloc>
      <yloc>128</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Create distinct Oppkind</name>
    <type>Neo4jCypherOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${graphdb-ds}</connection>
    <cypher>UNWIND $kinds as k
MERGE (ok:Oppkind {name:k.kind})
RETURN k.kind as kind
;</cypher>
    <batch_size>25000</batch_size>
    <read_only>N</read_only>
    <nr_retries_on_error/>
    <retry>Y</retry>
    <cypher_from_field>N</cypher_from_field>
    <cypher_field/>
    <unwind>Y</unwind>
    <unwind_map>kinds</unwind_map>
    <returning_graph>N</returning_graph>
    <return_graph_field/>
    <mappings>
      <mapping>
        <parameter>kind</parameter>
        <field>kind</field>
        <type>String</type>
      </mapping>
    </mappings>
    <returns>
      <return>
        <name>kind</name>
        <type>String</type>
        <source_type>String</source_type>
      </return>
    </returns>
    <attributes/>
    <GUI>
      <xloc>624</xloc>
      <yloc>288</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Create distinct Oppreason</name>
    <type>Neo4jCypherOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${graphdb-ds}</connection>
    <cypher>UNWIND $reasons as r
MERGE (or:Oppreason {name:r.reason})
RETURN r.reason as reason
;</cypher>
    <batch_size>25000</batch_size>
    <read_only>N</read_only>
    <nr_retries_on_error/>
    <retry>Y</retry>
    <cypher_from_field>N</cypher_from_field>
    <cypher_field/>
    <unwind>Y</unwind>
    <unwind_map>reasons</unwind_map>
    <returning_graph>N</returning_graph>
    <return_graph_field/>
    <mappings>
      <mapping>
        <parameter>reason</parameter>
        <field>reason</field>
        <type>String</type>
      </mapping>
    </mappings>
    <returns>
      <return>
        <name>reason</name>
        <type>String</type>
        <source_type>String</source_type>
      </return>
    </returns>
    <attributes/>
    <GUI>
      <xloc>624</xloc>
      <yloc>368</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Create distinct Oppsource</name>
    <type>Neo4jCypherOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${graphdb-ds}</connection>
    <cypher>UNWIND $sources as s
MERGE (os:Oppsource {name:s.source})
RETURN s.source as source
;</cypher>
    <batch_size>25000</batch_size>
    <read_only>N</read_only>
    <nr_retries_on_error/>
    <retry>Y</retry>
    <cypher_from_field>N</cypher_from_field>
    <cypher_field/>
    <unwind>Y</unwind>
    <unwind_map>sources</unwind_map>
    <returning_graph>N</returning_graph>
    <return_graph_field/>
    <mappings>
      <mapping>
        <parameter>source</parameter>
        <field>source</field>
        <type>String</type>
      </mapping>
    </mappings>
    <returns>
      <return>
        <name>source</name>
        <type>String</type>
        <source_type>String</source_type>
      </return>
    </returns>
    <attributes/>
    <GUI>
      <xloc>624</xloc>
      <yloc>448</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Create distinct Oppstage</name>
    <type>Neo4jCypherOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${graphdb-ds}</connection>
    <cypher>UNWIND $stages as s
WITH Tointeger(SPLIT(s.value,' ')[0]) as stageid,replace(s.value,left(s.value,3),'') as stagename
MERGE (os:Oppstage {id:stageid}) SET os.name=stagename
RETURN stageid,stagename
;</cypher>
    <batch_size>25000</batch_size>
    <read_only>N</read_only>
    <nr_retries_on_error/>
    <retry>Y</retry>
    <cypher_from_field>N</cypher_from_field>
    <cypher_field/>
    <unwind>Y</unwind>
    <unwind_map>stages</unwind_map>
    <returning_graph>N</returning_graph>
    <return_graph_field/>
    <mappings>
      <mapping>
        <parameter>value</parameter>
        <field>value</field>
        <type>String</type>
      </mapping>
    </mappings>
    <returns>
      <return>
        <name>stageid</name>
        <type>Integer</type>
        <source_type>Integer</source_type>
      </return>
      <return>
        <name>stagename</name>
        <type>String</type>
        <source_type>String</source_type>
      </return>
    </returns>
    <attributes/>
    <GUI>
      <xloc>624</xloc>
      <yloc>208</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Create distinct Ticketcategory</name>
    <type>Neo4jCypherOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${graphdb-ds}</connection>
    <cypher>UNWIND $categories as c
MERGE (t:Ticketcategory {name: c.CATEGORY})
RETURN c.CATEGORY as category
;
</cypher>
    <batch_size>25</batch_size>
    <read_only>N</read_only>
    <nr_retries_on_error/>
    <retry>Y</retry>
    <cypher_from_field>N</cypher_from_field>
    <cypher_field/>
    <unwind>Y</unwind>
    <unwind_map>categories</unwind_map>
    <returning_graph>N</returning_graph>
    <return_graph_field/>
    <mappings>
      <mapping>
        <parameter>CATEGORY</parameter>
        <field>CATEGORY</field>
        <type>String</type>
      </mapping>
    </mappings>
    <returns>
      <return>
        <name>category</name>
        <type>String</type>
        <source_type/>
      </return>
    </returns>
    <attributes/>
    <GUI>
      <xloc>624</xloc>
      <yloc>528</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Query Ticketcategories from RangerMSP</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${RangerMSP-ds}</connection>
    <execute_each_row>N</execute_each_row>
    <limit>0</limit>
    <sql>SELECT DISTINCT CATEGORY from Tickets where CATEGORY is not null</sql>
    <variables_active>Y</variables_active>
    <attributes/>
    <GUI>
      <xloc>352</xloc>
      <yloc>528</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Update Assetcategory from assets</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${RangerMSP-ds}</connection>
    <execute_each_row>N</execute_each_row>
    <sql>SELECT user1 from assets where user1 is not null and user1 &lt;&gt; ''</sql>
    <variables_active>N</variables_active>
    <attributes/>
    <GUI>
      <xloc>352</xloc>
      <yloc>64</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Update Manufacturer from assets</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${RangerMSP-ds}</connection>
    <execute_each_row>N</execute_each_row>
    <sql>SELECT manufacturer from assets where manufacturer is not null and manufacturer &lt;&gt; ''</sql>
    <variables_active>N</variables_active>
    <attributes/>
    <GUI>
      <xloc>352</xloc>
      <yloc>128</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Update Oppreason from opps</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${RangerMSP-ds}</connection>
    <execute_each_row>N</execute_each_row>
    <sql>SELECT distinct reason FROM opps WHERE reason is not null and reason &lt;&gt; ''</sql>
    <variables_active>N</variables_active>
    <attributes/>
    <GUI>
      <xloc>352</xloc>
      <yloc>368</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Update Oppsource from opps</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${RangerMSP-ds}</connection>
    <execute_each_row>N</execute_each_row>
    <sql>SELECT distinct source FROM opps WHERE source is not null and source &lt;&gt; ''</sql>
    <variables_active>N</variables_active>
    <attributes/>
    <GUI>
      <xloc>352</xloc>
      <yloc>448</yloc>
    </GUI>
  </transform>
  <transform>
    <name>UpdateOppkind from opps</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${RangerMSP-ds}</connection>
    <execute_each_row>N</execute_each_row>
    <sql>SELECT distinct kind FROM opps WHERE kind is not null and kind &lt;&gt; ''</sql>
    <variables_active>N</variables_active>
    <attributes/>
    <GUI>
      <xloc>352</xloc>
      <yloc>288</yloc>
    </GUI>
  </transform>
  <transform>
    <name>UpdateOppstage from opps</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${RangerMSP-ds}</connection>
    <execute_each_row>N</execute_each_row>
    <sql>SELECT value FROM valueslist WHERE TABLE_KIND=40</sql>
    <variables_active>N</variables_active>
    <attributes/>
    <GUI>
      <xloc>352</xloc>
      <yloc>208</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Wait </name>
    <type>BlockUntilTransformsFinish</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <transforms>
      <transform>
        <name>Create distinct Oppsource</name>
      </transform>
    </transforms>
    <attributes/>
    <GUI>
      <xloc>128</xloc>
      <yloc>528</yloc>
    </GUI>
  </transform>
  <transform_error_handling>
  </transform_error_handling>
  <attributes/>
</pipeline>
