<?xml version="1.0" encoding="UTF-8"?>
<pipeline>
  <info>
    <name>RangerMSP-new-contact-nodes</name>
    <name_sync_with_filename>Y</name_sync_with_filename>
    <description/>
    <extended_description/>
    <pipeline_version/>
    <pipeline_type>Normal</pipeline_type>
    <pipeline_status>0</pipeline_status>
    <parameters>
    </parameters>
    <capture_transform_performance>N</capture_transform_performance>
    <transform_performance_capturing_delay>1000</transform_performance_capturing_delay>
    <transform_performance_capturing_size_limit>100</transform_performance_capturing_size_limit>
    <created_user>-</created_user>
    <created_date>2020/01/03 22:40:31.737</created_date>
    <modified_user>admin</modified_user>
    <modified_date>2020/01/05 12:32:41.443</modified_date>
    <key_for_session_key>H4sIAAAAAAAAAAMAAAAAAAAAAAA=</key_for_session_key>
    <is_key_private>N</is_key_private>
  </info>
  <notepads>
  </notepads>
  <order>
    <hop>
      <from>Query RangerMSP Contact (cards) table</from>
      <to>Create (:Contact) nodes for new contacts</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Get last Contact</from>
      <to>Query RangerMSP Contact (cards) table</to>
      <enabled>Y</enabled>
    </hop>
  </order>
  <transform>
    <name>Create (:Contact) nodes for new contacts</name>
    <type>Neo4jCypherOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${graphdb-ds}</connection>
    <cypher>UNWIND $contacts as row
MATCH (r:Recordstatus{state:row.subcontactstatus})
OPTIONAL MATCH (cu:Rangeremployee {acctrecid:row.createuserid})
MERGE (c:Contact {acctrecid:row.recid})
ON CREATE SET c.company=row.company,c.title=row.title,c.email=trim(toLower(row.email1)),c.name=row.contact,c.createdon=datetime(row.createdate).epochmillis,c.updatedon=datetime(row.updatedate).epochmillis,c.createuser=cu.name
MERGE (c)-[:ACCOUNT_STATE]->(r)
WITH r,c,row
MATCH (a:Company {acctrecid:row.assigncardid})
FOREACH (ignoreMe in CASE WHEN r.state='A' THEN [1] ELSE [] END | MERGE (c)-[:WORKS_FOR]->(a))
FOREACH (ignoreMe in CASE WHEN r.state='N' THEN [1] ELSE [] END | MERGE (c)-[:FORMERLY_WORKED_FOR]->(a))
RETURN count(c)
;</cypher>
    <batch_size>500</batch_size>
    <read_only>N</read_only>
    <nr_retries_on_error/>
    <retry>Y</retry>
    <cypher_from_field>N</cypher_from_field>
    <cypher_field/>
    <unwind>Y</unwind>
    <unwind_map>contacts</unwind_map>
    <returning_graph>N</returning_graph>
    <return_graph_field/>
    <mappings>
      <mapping>
        <parameter>recid</parameter>
        <field>recid</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>subcontactstatus</parameter>
        <field>subcontactstatus</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>bcrecid</parameter>
        <field>bcrecid</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>city</parameter>
        <field>city</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>kind</parameter>
        <field>kind</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>cardid3</parameter>
        <field>cardid3</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>company</parameter>
        <field>company</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>createdate</parameter>
        <field>createdate</field>
        <type>LocalDateTime</type>
      </mapping>
      <mapping>
        <parameter>updatedate</parameter>
        <field>updatedate</field>
        <type>LocalDateTime</type>
      </mapping>
      <mapping>
        <parameter>title</parameter>
        <field>title</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>email1</parameter>
        <field>email1</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>contact</parameter>
        <field>contact</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>assigncardid</parameter>
        <field>assigncardid</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>createuserid</parameter>
        <field>createuserid</field>
        <type>String</type>
      </mapping>
    </mappings>
    <returns/>
    <attributes/>
    <GUI>
      <xloc>816</xloc>
      <yloc>80</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Get last Contact</name>
    <type>Neo4jCypherOutput</type>
    <description/>
    <distribute>N</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${graphdb-ds}</connection>
    <cypher>MATCH (cdl:Rangerdataload {name:'RangerMSP'})
OPTIONAL MATCH (l:Contact)
WITH max(coalesce(l.createdon,0)) as lastnewcontact, max(coalesce(l.updatedon,0)) as lastmodifiedcontact,cdl
WITH COLLECT(lastnewcontact)+COLLECT(lastmodifiedcontact)+cdl.crminit as tstamps
UNWIND tstamps as ts
WITH min(ts) as lastmodifiedcontact
WITH apoc.date.format(coalesce(lastmodifiedcontact,0),'ms','yyyy-MM-dd HH:mm:ss.sss') AS lastmodifiedcontact
//RETURN '1990-08-14 14:34:40.040' as lastmodifiedcontact
RETURN lastmodifiedcontact
;</cypher>
    <batch_size/>
    <read_only>Y</read_only>
    <nr_retries_on_error/>
    <retry>Y</retry>
    <cypher_from_field>N</cypher_from_field>
    <cypher_field/>
    <unwind>N</unwind>
    <unwind_map/>
    <returning_graph>N</returning_graph>
    <return_graph_field/>
    <mappings/>
    <returns>
      <return>
        <name>lastmodifiedcontact</name>
        <type>String</type>
        <source_type>String</source_type>
      </return>
    </returns>
    <attributes/>
    <GUI>
      <xloc>240</xloc>
      <yloc>80</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Query RangerMSP Contact (cards) table</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${RangerMSP-ds}</connection>
    <execute_each_row>N</execute_each_row>
    <lookup>Get last Contact</lookup>
    <limit>0</limit>
    <sql>SELECT recid,subcontactstatus,bcrecid,city,kind,cardid3,company,createdate,createuserid,updatedate,title,email1,contact,assigncardid from cards WHERE company is NOT NULL AND (kind is NULL or kind LIKE '%Customer%' or kind LIKE '%Client%') AND
 entitykind&lt;&gt;1 AND CONTACT is not null and CREATEDATE > ? and accountstatus = 'A' and subcontactstatus='A'</sql>
    <variables_active>Y</variables_active>
    <attributes/>
    <GUI>
      <xloc>512</xloc>
      <yloc>80</yloc>
    </GUI>
  </transform>
  <transform_error_handling>
  </transform_error_handling>
  <attributes/>
</pipeline>
