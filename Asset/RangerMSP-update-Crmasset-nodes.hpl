<?xml version="1.0" encoding="UTF-8"?>
<pipeline>
  <info>
    <name>RangerMSP-update-Crmasset-nodes</name>
    <name_sync_with_filename>Y</name_sync_with_filename>
    <description/>
    <extended_description/>
    <pipeline_version/>
    <pipeline_type>Normal</pipeline_type>
    <pipeline_status>0</pipeline_status>
    <parameters>
    </parameters>
    <capture_transform_performance>N</capture_transform_performance>
    <transform_performance_capturing_delay>1000</transform_performance_capturing_delay>
    <transform_performance_capturing_size_limit>100</transform_performance_capturing_size_limit>
    <created_user>-</created_user>
    <created_date>2020/01/03 22:40:31.737</created_date>
    <modified_user>admin</modified_user>
    <modified_date>2020/01/05 12:32:41.443</modified_date>
    <key_for_session_key>H4sIAAAAAAAAAAMAAAAAAAAAAAA=</key_for_session_key>
    <is_key_private>N</is_key_private>
  </info>
  <notepads>
  </notepads>
  <order>
    <hop>
      <from>Get last :Rangerasset</from>
      <to>Query RangerMSP Assets (modified assets)</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Query RangerMSP Assets (modified assets)</from>
      <to>Modify :Rangerassets for modified assets </to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Query RangerMSP Assets (modified assets)</from>
      <to>Block until transforms finish</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Block until transforms finish</from>
      <to>Modify :Rangerassets (manufacturered) for modified assets </to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Block until transforms finish</from>
      <to>Modify :Rangerassets (model/parent/haas) for modified assets</to>
      <enabled>Y</enabled>
    </hop>
  </order>
  <transform>
    <name>Block until transforms finish</name>
    <type>BlockUntilTransformsFinish</type>
    <description/>
    <distribute>N</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <transforms>
      <transform>
        <name>Modify :Rangerassets for modified assets </name>
      </transform>
    </transforms>
    <attributes/>
    <GUI>
      <xloc>464</xloc>
      <yloc>304</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Get last :Rangerasset</name>
    <type>Neo4jCypherOutput</type>
    <description/>
    <distribute>N</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${graphdb-ds}</connection>
    <cypher>MATCH (cdl:Rangerdataload {name:'RangerMSP'})
WITH max(coalesce(cdl.lastmodifiedasset,0)) as lastmodifiedasset
//WITH apoc.date.format(lastmodifiedasset,'ms','yyyy-MM-dd HH:mm:ss.sss') AS lastmodifiedasset
WITH apoc.date.format(lastmodifiedasset,'ms','yyyy-MM-dd HH:mm:ss.sss') AS lastmodifiedasset
//RETURN '1990-08-14 14:34:40.040' as lastmodifiedasset
RETURN lastmodifiedasset
;</cypher>
    <batch_size/>
    <read_only>Y</read_only>
    <nr_retries_on_error/>
    <retry>Y</retry>
    <cypher_from_field>N</cypher_from_field>
    <cypher_field/>
    <unwind>N</unwind>
    <unwind_map/>
    <returning_graph>N</returning_graph>
    <return_graph_field/>
    <mappings/>
    <returns>
      <return>
        <name>lastmodifiedasset</name>
        <type>String</type>
        <source_type>String</source_type>
      </return>
    </returns>
    <attributes/>
    <GUI>
      <xloc>112</xloc>
      <yloc>96</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Modify :Rangerassets (manufacturered) for modified assets </name>
    <type>Neo4jCypherOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${graphdb-ds}</connection>
    <cypher>UNWIND $assets as row
MATCH (ca:Rangerasset {recid:row.RECID})
WITH COLLECT(DISTINCT ca) as assets,row
UNWIND assets as ca
// FIND relationships for the existing (:Rangerasset) node
OPTIONAL MATCH (ca)-[mbr:MANUFACTURERED_BY]-(omb:Manufacturer)
// REMOVE all relationships that are no longer correct
FOREACH (ignoreMe in CASE WHEN omb.name IS NULL or row.MANUFACTURER &lt;&gt; omb.name THEN [1] ELSE [] END | DELETE mbr)
;</cypher>
    <batch_size>500</batch_size>
    <read_only>N</read_only>
    <nr_retries_on_error/>
    <retry>Y</retry>
    <cypher_from_field>N</cypher_from_field>
    <cypher_field/>
    <unwind>Y</unwind>
    <unwind_map>assets</unwind_map>
    <returning_graph>N</returning_graph>
    <return_graph_field/>
    <mappings>
      <mapping>
        <parameter>VALUE</parameter>
        <field>VALUE</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>RECID</parameter>
        <field>RECID</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>ACCOUNTRECID</parameter>
        <field>ACCOUNTRECID</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>CONTACTRECID</parameter>
        <field>CONTACTRECID</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>PARENTASSETRECID</parameter>
        <field>PARENTASSETRECID</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>STATUS</parameter>
        <field>STATUS</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>NAME</parameter>
        <field>NAME</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>SERIALNO</parameter>
        <field>SERIALNO</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>ASSETCODE</parameter>
        <field>ASSETCODE</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>LOCATION</parameter>
        <field>LOCATION</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>INSTALLEDBY</parameter>
        <field>INSTALLEDBY</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>DESCRIPTION</parameter>
        <field>DESCRIPTION</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>MANUFACTURER</parameter>
        <field>MANUFACTURER</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>MODEL</parameter>
        <field>MODEL</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>USER3</parameter>
        <field>USER3</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>CREATEUSER</parameter>
        <field>CREATEUSER</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>CREATEDATE</parameter>
        <field>CREATEDATE</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>UPDATEDATE</parameter>
        <field>UPDATEDATE</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>USER5</parameter>
        <field>USER5</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>WARRANTYEXPDATE</parameter>
        <field>WARRANTYEXPDATE</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>USER1</parameter>
        <field>USER1</field>
        <type>String</type>
      </mapping>
    </mappings>
    <returns/>
    <attributes/>
    <GUI>
      <xloc>816</xloc>
      <yloc>208</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Modify :Rangerassets (model/parent/haas) for modified assets</name>
    <type>Neo4jCypherOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${graphdb-ds}</connection>
    <cypher>UNWIND $assets as row
MATCH (ca:Rangerasset {recid:row.RECID})

WITH COLLECT(DISTINCT ca) as assets,row
UNWIND assets as ca

OPTIONAL MATCH (pa:Rangerasset {recid:coalesce(row.PARENTASSETRECID,'None Provided')})
OPTIONAL MATCH (md:Model {name:coalesce(row.MODEL,'None Provided')})
OPTIONAL MATCH (ih:Rangerhaas)

// FIND relationships for the existing (:Rangerasset) node
OPTIONAL MATCH (ca)-[cor:CHILD_OF]-(oco:Rangerasset)
OPTIONAL MATCH (ca)-[aimr:ASSET_IS_MODEL]->(oaim:Model)
OPTIONAL MATCH (ca)-[bor:BLUENET_OWNED]-(obo:Rangerhaas)

// REMOVE all relationships that are no longer correct
FOREACH (ignoreMe in CASE WHEN oco.recid IS NULL or (row.PARENTASSETRECID &lt;&gt; oco.recid)  THEN [1] ELSE [] END | DELETE cor)
FOREACH (ignoreMe in CASE WHEN oaim.name IS NULL or (row.MODEL &lt;&gt; oaim.name)  THEN [1] ELSE [] END | DELETE aimr)
FOREACH (ignoreMe in CASE WHEN (trim(toLower(row.USER5)) &lt;&gt; 'haas')  THEN [1] ELSE [] END | DELETE bor)

// RECREATE proper RELATIONSHIPS if they are missing
FOREACH (ignoreMe in CASE WHEN pa.recid IS NOT NULL THEN [1] ELSE [] END | MERGE (pa)&lt;-[:CHILD_OF]-(ca))
//FOREACH (ignoreMe in CASE WHEN md.name IS NULL THEN [1] ELSE [] END | MERGE (a)-[:ASSET_IS_MODEL]->(md))
FOREACH (ignoreMe in CASE WHEN row.MODEL is not null and trim(row.MODEL) &lt;&gt; "" THEN [1] ELSE [] END | MERGE (md:Model {name:row.MODEL}))
FOREACH (ignoreMe in CASE WHEN md.name IS NOT NULL THEN [1] ELSE [] END | MERGE (ca)-[:ASSET_IS_MODEL]->(md))
FOREACH (ignoreMe in CASE WHEN trim(toLower(row.USER5))='haas' and ih.name IS NOT NULL THEN [1] ELSE [] END | MERGE (ca)-[:BLUENET_OWNED]->(ih))
;</cypher>
    <batch_size>500</batch_size>
    <read_only>N</read_only>
    <nr_retries_on_error/>
    <retry>Y</retry>
    <cypher_from_field>N</cypher_from_field>
    <cypher_field/>
    <unwind>Y</unwind>
    <unwind_map>assets</unwind_map>
    <returning_graph>N</returning_graph>
    <return_graph_field/>
    <mappings>
      <mapping>
        <parameter>VALUE</parameter>
        <field>VALUE</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>RECID</parameter>
        <field>RECID</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>ACCOUNTRECID</parameter>
        <field>ACCOUNTRECID</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>CONTACTRECID</parameter>
        <field>CONTACTRECID</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>PARENTASSETRECID</parameter>
        <field>PARENTASSETRECID</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>STATUS</parameter>
        <field>STATUS</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>NAME</parameter>
        <field>NAME</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>SERIALNO</parameter>
        <field>SERIALNO</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>ASSETCODE</parameter>
        <field>ASSETCODE</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>LOCATION</parameter>
        <field>LOCATION</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>INSTALLEDBY</parameter>
        <field>INSTALLEDBY</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>DESCRIPTION</parameter>
        <field>DESCRIPTION</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>MANUFACTURER</parameter>
        <field>MANUFACTURER</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>MODEL</parameter>
        <field>MODEL</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>USER3</parameter>
        <field>USER3</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>CREATEUSER</parameter>
        <field>CREATEUSER</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>CREATEDATE</parameter>
        <field>CREATEDATE</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>UPDATEDATE</parameter>
        <field>UPDATEDATE</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>USER5</parameter>
        <field>USER5</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>WARRANTYEXPDATE</parameter>
        <field>WARRANTYEXPDATE</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>USER1</parameter>
        <field>USER1</field>
        <type>String</type>
      </mapping>
    </mappings>
    <returns/>
    <attributes/>
    <GUI>
      <xloc>816</xloc>
      <yloc>304</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Modify :Rangerassets for modified assets </name>
    <type>Neo4jCypherOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${graphdb-ds}</connection>
    <cypher>UNWIND $assets as row
MATCH (ca:Rangerasset {recid:row.RECID})
MATCH (a:Company {acctrecid:coalesce(row.ACCOUNTRECID,'None Provided')})

OPTIONAL MATCH (rs:Recordstatus {state:row.STATUS})
OPTIONAL MATCH (c:Contact {acctrecid:coalesce(row.CONTACTRECID,'None Provided')})
OPTIONAL MATCH (ib:Rangeremployee {acctrecid:coalesce(row.INSTALLEDBY,'None Provided')})
OPTIONAL MATCH (cb:Rangeremployee {acctrecid:coalesce(row.CREATEUSER,'None Provided')})
OPTIONAL MATCH (ic:Assetcategory {name:coalesce(row.USER1,'None Provided')})
OPTIONAL MATCH (at:Assettype {name:coalesce(row.VALUE,'None Provided')})

// FIND relationships for the existing (:Rangerasset) node
OPTIONAL MATCH (ca)-[asr:ASSET_STATE]-(oas:Recordstatus)
OPTIONAL MATCH (ca)-[aor:ASSET_OF]-(oao:Company)
OPTIONAL MATCH (ca)-[ubr:USED_BY]-(oub:Contact)
OPTIONAL MATCH (ca)-[ibr:INSTALLED_BY]-(oib:Rangeremployee)
OPTIONAL MATCH (ca)-[cbr:CREATED_BY]-(ocb:Rangeremployee)
OPTIONAL MATCH (ca)-[icr:IN_CATEGORY]->(oic:Assetcategory)
OPTIONAL MATCH (ca)-[atr:ASSET_TYPE]->(oat:Assettype)

// REMOVE all relationships that are no longer correct
FOREACH (ignoreMe in CASE WHEN row.STATUS &lt;&gt; oas.state THEN [1] ELSE [] END | DELETE asr)
FOREACH (ignoreMe in CASE WHEN row.ACCOUNTRECID &lt;&gt; oao.acctrecid THEN [1] ELSE [] END | DELETE aor)
FOREACH (ignoreMe in CASE WHEN row.CONTACTRECID &lt;&gt; oub.acctrecid THEN [1] ELSE [] END | DELETE ubr)
FOREACH (ignoreMe in CASE WHEN oib.acctrecid IS NULL or (row.INSTALLEDBY &lt;&gt; oib.acctrecid)  THEN [1] ELSE [] END | DELETE ibr)
FOREACH (ignoreMe in CASE WHEN ocb.acctrecid IS NULL or (row.CREATEUSER &lt;&gt; ocb.acctrecid)  THEN [1] ELSE [] END | DELETE cbr)
FOREACH (ignoreMe in CASE WHEN oic.name IS NULL or (row.USER1 &lt;&gt; oic.name and trim(row.USER1) &lt;&gt; oic.name)  THEN [1] ELSE [] END | DELETE icr)
FOREACH (ignoreMe in CASE WHEN oat.name IS NULL or (row.VALUE &lt;&gt; oat.name and trim(row.VALUE) &lt;&gt; oat.name)  THEN [1] ELSE [] END | DELETE atr)

// REMOVE all node properties that are no longer correct (then set to the values based on the row)
FOREACH (ignoreMe in CASE WHEN a.name='None Provided' THEN [1] ELSE [] END | SET ca.company=row.ACCOUNTRECID)
FOREACH (ignoreMe in CASE WHEN coalesce(ca.name,'isnull') &lt;&gt; coalesce(trim(toLower(row.NAME)),'isnull') THEN [1] ELSE [] END | SET ca.name=trim(toLower(row.NAME)))
FOREACH (ignoreMe in CASE WHEN coalesce(ca.category,'isnull') &lt;&gt; coalesce(row.USER1,'isnull') THEN [1] ELSE [] END | SET ca.category=row.USER1)
FOREACH (ignoreMe in CASE WHEN coalesce(ca.type,'isnull') &lt;&gt; coalesce(row.VALUE,'isnull') THEN [1] ELSE [] END | SET ca.type=row.VALUE)
FOREACH (ignoreMe in CASE WHEN coalesce(ca.manufacturer,'isnull') &lt;&gt; coalesce(row.MANUFACTURER,'isnull') THEN [1] ELSE [] END | SET ca.manufacturer=row.MANUFACTURER)
FOREACH (ignoreMe in CASE WHEN coalesce(ca.model,'isnull') &lt;&gt; coalesce(row.MODEL,'isnull') THEN [1] ELSE [] END | SET ca.model=row.MODEL)
FOREACH (ignoreMe in CASE WHEN coalesce(ca.assettag,'isnull') &lt;&gt; coalesce(row.ASSETCODE,'isnull') THEN [1] ELSE [] END | SET ca.assettag=row.ASSETCODE)
FOREACH (ignoreMe in CASE WHEN coalesce(ca.location,'isnull') &lt;&gt; coalesce(row.LOCATION,'isnull') THEN [1] ELSE [] END | SET ca.location=row.LOCATION)
FOREACH (ignoreMe in CASE WHEN coalesce(ca.description,'isnull') &lt;&gt; coalesce(row.DESCRIPTION,'isnull') THEN [1] ELSE [] END | SET ca.description=row.DESCRIPTION)
FOREACH (ignoreMe in CASE WHEN coalesce(ca.serial,'isnull') &lt;&gt; coalesce(toLower(apoc.text.replace(apoc.text.replace(row.SERIALNO, "[^a-zA-Z\\d]",""),"VMware","")),'isnull') THEN [1] ELSE [] END | SET ca.serial=toLower(apoc.text.replace(apoc.text.replace(row.SERIALNO, "[^a-zA-Z\\d]",""),"VMware","")))
FOREACH (ignoreMe in CASE WHEN coalesce(ca.mac,'isnull') &lt;&gt; coalesce(toLower(apoc.text.replace(row.USER3,"[^a-zA-Z\\d]","")),'isnull') THEN [1] ELSE [] END | SET ca.mac=toLower(apoc.text.replace(row.USER3,"[^a-zA-Z\\d]","")))
FOREACH (ignoreMe in CASE WHEN coalesce(ca.createdon,'isnull') &lt;&gt; coalesce(datetime(row.CREATEDATE).epochmillis,'isnull') THEN [1] ELSE [] END | SET ca.createdon=datetime(row.CREATEDATE).epochmillis)
FOREACH (ignoreMe in CASE WHEN coalesce(ca.updatedon,'isnull') &lt;&gt; coalesce(datetime(row.UPDATEDATE).epochmillis,'isnull') THEN [1] ELSE [] END | SET ca.updatedon=datetime(row.UPDATEDATE).epochmillis)
FOREACH (ignoreMe in CASE WHEN coalesce(ca.expireson,'isnull') &lt;&gt; coalesce(datetime(row.WARRANTYEXPDATE).epochmillis,'isnull') THEN [1] ELSE [] END | SET ca.expireson=datetime(row.WARRANTYEXPDATE).epochmillis)

// RECREATE proper RELATIONSHIPS if they are missing
FOREACH (ignoreMe in CASE WHEN ca.recid IS NOT NULL and rs.state IS NOT NULL THEN [1] ELSE [] END | MERGE (ca)-[:ASSET_STATE]-(rs))
FOREACH (ignoreMe in CASE WHEN a.acctrecid IS NOT NULL THEN [1] ELSE [] END | MERGE (ca)-[:ASSET_OF]->(a))
FOREACH (ignoreMe in CASE WHEN c.acctrecid IS NOT NULL THEN [1] ELSE [] END | MERGE (ca)-[:USED_BY]-(c))
FOREACH (ignoreMe in CASE WHEN ib.acctrecid IS NOT NULL THEN [1] ELSE [] END | MERGE (ca)-[:INSTALLED_BY]-(ib))
FOREACH (ignoreMe in CASE WHEN cb.acctrecid IS NOT NULL THEN [1] ELSE [] END | MERGE (ca)-[:CREATED_BY]-(cb))
FOREACH (ignoreMe in CASE WHEN ic.name IS NOT NULL THEN [1] ELSE [] END | MERGE (ca)-[:IN_CATEGORY]->(ic))
FOREACH (ignoreMe in CASE WHEN at.name IS NOT NULL THEN [1] ELSE [] END | MERGE (ca)-[:ASSET_TYPE]->(at))
//SET date for last modified Asset
WITH ca.updatedon as lastmodified
MATCH (cdl:Rangerdataload {name:'RangerMSP'})
FOREACH (ignoreMe in CASE WHEN lastmodified > cdl.lastmodifiedasset or cdl.lastmodifiedasset IS NULL THEN [1] ELSE [] END | SET cdl.lastmodifiedasset=lastmodified)
;
</cypher>
    <batch_size>500</batch_size>
    <read_only>N</read_only>
    <nr_retries_on_error/>
    <retry>Y</retry>
    <cypher_from_field>N</cypher_from_field>
    <cypher_field/>
    <unwind>Y</unwind>
    <unwind_map>assets</unwind_map>
    <returning_graph>N</returning_graph>
    <return_graph_field/>
    <mappings>
      <mapping>
        <parameter>VALUE</parameter>
        <field>VALUE</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>RECID</parameter>
        <field>RECID</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>ACCOUNTRECID</parameter>
        <field>ACCOUNTRECID</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>CONTACTRECID</parameter>
        <field>CONTACTRECID</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>PARENTASSETRECID</parameter>
        <field>PARENTASSETRECID</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>STATUS</parameter>
        <field>STATUS</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>NAME</parameter>
        <field>NAME</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>SERIALNO</parameter>
        <field>SERIALNO</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>ASSETCODE</parameter>
        <field>ASSETCODE</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>LOCATION</parameter>
        <field>LOCATION</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>INSTALLEDBY</parameter>
        <field>INSTALLEDBY</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>DESCRIPTION</parameter>
        <field>DESCRIPTION</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>MANUFACTURER</parameter>
        <field>MANUFACTURER</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>MODEL</parameter>
        <field>MODEL</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>USER3</parameter>
        <field>USER3</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>CREATEUSER</parameter>
        <field>CREATEUSER</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>CREATEDATE</parameter>
        <field>CREATEDATE</field>
        <type>LocalDateTime</type>
      </mapping>
      <mapping>
        <parameter>UPDATEDATE</parameter>
        <field>UPDATEDATE</field>
        <type>LocalDateTime</type>
      </mapping>
      <mapping>
        <parameter>USER5</parameter>
        <field>USER5</field>
        <type>String</type>
      </mapping>
      <mapping>
        <parameter>WARRANTYEXPDATE</parameter>
        <field>WARRANTYEXPDATE</field>
        <type>LocalDateTime</type>
      </mapping>
      <mapping>
        <parameter>USER1</parameter>
        <field>USER1</field>
        <type>String</type>
      </mapping>
    </mappings>
    <returns/>
    <attributes/>
    <GUI>
      <xloc>816</xloc>
      <yloc>96</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Query RangerMSP Assets (modified assets)</name>
    <type>TableInput</type>
    <description/>
    <distribute>N</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>${RangerMSP-ds}</connection>
    <execute_each_row>N</execute_each_row>
    <lookup>Get last :Rangerasset</lookup>
    <limit>0</limit>
    <sql>select v.VALUE,a.RECID,a.ACCOUNTRECID,a.CONTACTRECID,a.PARENTASSETRECID,a.STATUS,a.NAME,a.SERIALNO,a.ASSETCODE,a.WARRANTYEXPDATE,a.LOCATION,a.INSTALLEDBY,CAST(a.DESCRIPTION as SQL_VARCHAR) AS DESCRIPTION,a.MANUFACTURER,a.MODEL,a.USER3,a.CREATEUSER,a.CREATEDATE,UPDATEDATE,a.USER1,a.USER5 from ValuesList as v INNER JOIN Assets AS a on v.RECID = a.ASSETTYPE where a.RECID is not null AND a.UPDATEDATE > ?


</sql>
    <variables_active>Y</variables_active>
    <attributes/>
    <GUI>
      <xloc>384</xloc>
      <yloc>96</yloc>
    </GUI>
  </transform>
  <transform_error_handling>
  </transform_error_handling>
  <attributes/>
</pipeline>
